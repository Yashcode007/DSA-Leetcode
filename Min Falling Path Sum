class Solution {
public:
    int mini(int i,int j,int n, int matrix[][100]){
        if(j==n-1){
           return min(matrix[i+1][j], matrix[i+1][j-1]);
        }else if(j==0){
           return min(matrix[i+1][j], matrix[i+1][j+1]);
        }

        return min(matrix[i+1][j], min(matrix[i+1][j-1], matrix[i+1][j+1]));
    }

    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size() ;
        int dp[100][100];

        for(int j=n-1; j>=0 ; j--){
            dp[n-1][j]=matrix[n-1][j]; 
        }

        for(int i=n-2 ; i>=0 ; i--){
            for(int j=n-1; j>=0 ; j--){
                dp[i][j] = matrix[i][j] + mini(i,j,n,dp);
            }
        }

        int ans=INT_MAX;
        for(int i=0 ; i<n ; i++){
           if(ans>dp[0][i]){
               ans=dp[0][i];
           }
        }

        return ans; 
    }
};
