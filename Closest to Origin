class Solution {
public:
    struct test {
        int x, y, z;
        test(int a, int b, int c) : x(a), y(b), z(c) {}
    };

    struct ComparePoints {
        bool operator()(const test& a, const test& b) {
            return a.x > b.x;
        }
    };

    test makepair(vector<int> xy) {
        int d = 0;
        d += xy[0] * xy[0];
        d += xy[1] * xy[1];
        test ans(d, xy[0], xy[1]);
        return ans;
    }

    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        priority_queue<test, vector<test>, ComparePoints> pairs;
        for (int i = 0; i < points.size(); i++) {
            pairs.push(makepair(points[i]));
        }

        vector<vector<int>> ans;
        int j = 0;
        while (j != k) {
            vector<int> sv;
            test b = pairs.top();
            sv.push_back(b.y);
            sv.push_back(b.z);
            ans.push_back(sv);
            pairs.pop();
            j++;
        }

        return ans;
    }
};
